import os

from ..table import DBTable
from cachetools import TTLCache
import logging
import base64

_logger = logging.getLogger(__name__)

class LoginSSHTable(DBTable):
    _fetch_on_startup = True

    TABLE_NAME = "ssh_login"


    def __init__(self):
        super().__init__(self.TABLE_NAME)

    def retrieve_login_public_key(self, login: str) -> str | None:
        """
        Retrieve login public key (RSA) of given login. None if login has no defined public key.
        :param login: the login name
        :return: the Public key
        """

        # Safe next, because login is UNIQUE in SQL Table
        record = next((user for user in self.records if user["login"] == login), None)

        if not record:
            return None

        return record["ssh_public"]


    def authenticate(self, login: str, signatureb64: str) -> bool:
        """
        Authenticate the user given the signature
        :param login: the login
        :param signatureb64: the signature generated by the user in base64
        :return: If the user has been authenticated
        """
        return True


    def fetch_records(self):
        return \
                f"""
                SELECT login,ssh_public FROM {self.TABLE_NAME};
                """

    def create_table(self):
        return\
            f"""
            CREATE TABLE IF NOT EXISTS {self.TABLE_NAME} (
              login VARCHAR PRIMARY KEY,
              name VARCHAR UNIQUE NOT NULL,
              ssh_public VARCHAR NOT NULL
            );"""